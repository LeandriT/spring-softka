plugins {
    id 'java'

    id 'jacoco'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'ec.banco.pichincha'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
    testImplementation 'com.h2database:h2'

}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    exclude '**/ec/banco/pichincha/customer_service/CustomerServiceApplication/**/*IntegrationTest*'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['CustomerServiceApplication*']
            limit {
                minimum = 0.95
            }
            excludes = [
                    'ec.banco.pichincha.customer_service.CustomerServiceApplication',
                    'ec.banco.pichincha.customer_service.dto.**',
                    'ec.banco.pichincha.customer_service.mapper.**',
                    'ec.banco.pichincha.customer_service.model.**',
                    'ec.banco.pichincha.customer_service.repository.**',
                    'ec.banco.pichincha.customer_service.config.**',
                    'ec.banco.pichincha.customer_service.exception.**',
            ]
        }
    }

}

jacocoTestReport {
    reports {
        html.destination file('build/jacocoHtml')
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/ec/banco/pichincha/customer_service/CustomerServiceApplication*',
                    '**/ec/banco/pichincha/customer_service/dto/**',
                    '**/ec/banco/pichincha/customer_service/mapper/**',
                    '**/ec/banco/pichincha/customer_service/model/**',
                    '**/ec/banco/pichincha/customer_service/repository/**',
                    '**/ec/banco/pichincha/customer_service/config/**',
                    '**/ec/banco/pichincha/customer_service/exception/**',
            ])
        })
    }
}